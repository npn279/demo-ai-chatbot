1. Giới thiệu
Trước khi đi vào phần ý tưởng chính của Support Vector Machine, tôi xin một lần nữa nhắc lại kiến thức về hình học giải tích mà chúng ta đã quá quen khi ôn thi đại học.


1.1. Khoảng cách từ một điểm tới một siêu mặt phẳng
Trong không gian 2 chiều, ta biết rằng khoảng cách từ một điểm có toạ độ 
(
x
0
,
y
0
)
 tới đường thẳng có phương trình 
w
1
x
+
w
2
y
+
b
=
0
 được xác định bởi:
|
w
1
x
0
+
w
2
y
0
+
b
|
√
w
2
1
+
w
2
2
Trong không gian ba chiều, khoảng cách từ một điểm có toạ độ 
(
x
0
,
y
0
,
z
0
)
 tới một mặt phẳng có phương trình 
w
1
x
+
w
2
y
+
w
3
z
+
b
=
0
 được xác định bởi:
|
w
1
x
0
+
w
2
y
0
+
w
3
z
0
+
b
|
√
w
2
1
+
w
2
2
+
w
2
3
Hơn nữa, nếu ta bỏ dấu trị tuyệt đối ở tử số, chúng ta có thể xác định được điểm đó nằm về phía nào của đường thẳng hay mặt phẳng đang xét. Những điểm làm cho biểu thức trong dấu giá trị tuyệt đối mang dấu dương nằm về cùng 1 phía (tôi tạm gọi đây là phía dương của đường thẳng), những điểm làm cho biểu thức trong dấu giá trị tuyệt đối mang dấu âm nằm về phía còn lại (tôi gọ là phía âm). Những điểm nằm trên đường thẳng/măt phẳng sẽ làm cho tử số có giá trị bằng 0, tức khoảng cách bằng 0.

Việc này có thể được tổng quát lên không gian nhiều chiều: Khoảng cách từ một điểm (vector) có toạ độ 
x
0
 tới siêu mặt phẳng (hyperplane) có phương trình 
w
T
x
+
b
=
0
 được xác định bởi:
|
w
T
x
0
+
b
|
|
|
w
|
|
2
Với 
|
|
w
|
|
2
=
√
∑
d
i
=
1
w
2
i
 với 
d
 là số chiều của không gian.


1.2. Nhắc lại bài toán phân chia hai classes
Chúng ta cùng quay lại với bài toán trong Perceptron Learning Algorithm (PLA). Giả sử rằng có hai class khác nhau được mô tả bởi các điểm trong không gian nhiều chiều, hai classes này linearly separable, tức tồn tại một siêu phẳng phân chia chính xác hai classes đó. Hãy tìm một siêu mặt phẳng phân chia hai classes đó, tức tất cả các điểm thuộc một class nằm về cùng một phía của siêu mặt phẳng đó và ngược phía với toàn bộ các điểm thuộc class còn lại. Chúng ta đã biết rằng, thuật toán PLA có thể làm được việc này nhưng nó có thể cho chúng ta vô số nghiệm như Hình 1 dưới đây:


Hình 1: Các mặt phân cách hai classes linearly separable.
Câu hỏi đặt ra là: trong vô số các mặt phân chia đó, đâu là mặt phân chia tốt nhất theo một tiêu chuẩn nào đó? Trong ba đường thẳng minh họa trong Hình 1 phía trên, có hai đường thẳng khá lệch về phía class hình tròn đỏ. Điều này có thể khiến cho lớp màu đỏ không vui vì lãnh thổ xem ra bị lấn nhiều quá. Liệu có cách nào để tìm được đường phân chia mà cả hai classes đều cảm thấy công bằng và hạnh phúc nhất hay không?

Chúng ta cần tìm một tiêu chuẩn để đo sự hạnh phúc của mỗi class. Hãy xem Hình 2 dưới đây:

	
Hình 2: Margin của hai classes là bằng nhau và lớn nhất có thể.
Nếu ta định nghĩa mức độ hạnh phúc của một class tỉ lệ thuận với khoảng cách gần nhất từ một điểm của class đó tới đường/mặt phân chia, thì ở Hình 2 trái, class tròn đỏ sẽ không được hạnh phúc cho lắm vì đường phân chia gần nó hơn class vuông xanh rất nhiều. Chúng ta cần một đường phân chia sao cho khoảng cách từ điểm gần nhất của mỗi class (các điểm được khoanh tròn) tới đường phân chia là như nhau, như thế thì mới công bằng. Khoảng cách như nhau này được gọi là margin (lề).

Đã có công bằng rồi, chúng ta cần văn minh nữa. Công bằng mà cả hai đều kém hạnh phúc như nhau thì chưa phải là văn mình cho lắm.

Chúng ta xét tiếp Hình 2 bên phải khi khoảng cách từ đường phân chia tới các điểm gần nhất của mỗi class là như nhau. Xét hai cách phân chia bởi đường nét liền màu đen và đường nét đứt màu lục, đường nào sẽ làm cho cả hai class hạnh phúc hơn? Rõ ràng đó phải là đường nét liền màu đen vì nó tạo ra một margin rộng hơn.

Việc margin rộng hơn sẽ mang lại hiệu ứng phân lớp tốt hơn vì sự phân chia giữa hai classes là rạch ròi hơn. Việc này, sau này các bạn sẽ thấy, là một điểm khá quan trọng giúp Support Vector Machine mang lại kết quả phân loại tốt hơn so với Neural Network với 1 layer, tức Perceptron Learning Algorithm.

Bài toán tối ưu trong Support Vector Machine (SVM) chính là bài toán đi tìm đường phân chia sao cho margin là lớn nhất. Đây cũng là lý do vì sao SVM còn được gọi là Maximum Margin Classifier. Nguồn gốc của tên gọi Support Vector Machine sẽ sớm được làm sáng tỏ.


2. Xây dựng bài toán tối ưu cho SVM
Giả sử rằng các cặp dữ liệu của training set là 
(
x
1
,
y
1
)
,
(
x
2
,
y
2
)
,
…
,
(
x
N
,
y
N
)
 với vector 
x
i
∈
R
d
 thể hiện đầu vào của một điểm dữ liệu và 
y
i
 là nhãn của điểm dữ liệu đó. 
d
 là số chiều của dữ liệu và 
N
 là số điểm dữ liệu. Giả sử rằng nhãn của mỗi điểm dữ liệu được xác định bởi 
y
i
=
1
 (class 1) hoặc 
y
i
=
−
1
 (class 2) giống như trong PLA.

Để giúp các bạn dễ hình dung, chúng ta cùng xét trường hợp trong không gian hai chiều dưới đây. Không gian hai chiều để các bạn dễ hình dung, các phép toán hoàn toàn có thể được tổng quát lên không gian nhiều chiều.


Hình 3: Phân tích bài toán SVM.
Giả sử rằng các điểm vuông xanh thuộc class 1, các điểm tròn đỏ thuộc class -1 và mặt 
w
T
x
+
b
=
w
1
x
1
+
w
2
x
2
+
b
=
0
 là mặt phân chia giữa hai classes (Hình 3). Hơn nữa, class 1 nằm về phía dương, class -1 nằm về phía âm của mặt phân chia. Nếu ngược lại, ta chỉ cần đổi dấu của 
w
 và 
b
. Chú ý rằng chúng ta cần đi tìm các hệ số 
w
 và 
b
.

Ta quan sát thấy một điểm quan trọng sau đây: với cặp dữ liệu 
(
x
n
,
y
n
)
 bất kỳ, khoảng cách từ điểm đó tới mặt phân chia là:
y
n
(
w
T
x
n
+
b
)
|
|
w
|
|
2
Điều này có thể dễ nhận thấy vì theo giả sử ở trên, 
y
n
 luôn cùng dấu với phía của 
x
n
. Từ đó suy ra 
y
n
 cùng dấu với 
(
w
T
x
n
+
b
)
, và tử số luôn là 1 số không âm.

Với mặt phần chia như trên, margin được tính là khoảng cách gần nhất từ 1 điểm tới mặt đó (bất kể điểm nào trong hai classes):
margin
=
min
n
 
y
n
(
w
T
x
n
+
b
)
|
|
w
|
|
2
Bài toán tối ưu trong SVM chính là bài toán tìm 
w
 và 
b
 sao cho margin này đạt giá trị lớn nhất:
(
w
,
b
)
=
arg
max
w
,
b
 
{
min
n
 
y
n
(
w
T
x
n
+
b
)
|
|
w
|
|
2
}
=
arg
max
w
,
b
 
{
1
|
|
w
|
|
2
min
n
 
y
n
(
w
T
x
n
+
b
)
}
 
 
 
(
1
)
Việc giải trực tiếp bài toán này sẽ rất phức tạp, nhưng các bạn sẽ thấy có cách để đưa nó về bài toán đơn giản hơn.

Nhận xét quan trọng nhất là nếu ta thay vector hệ số 
w
 bởi 
k
w
 và 
b
 bởi 
k
b
 trong đó 
k
 là một hằng số dương thì mặt phân chia không thay đổi, tức khoảng cách từ từng điểm đến mặt phân chia không đổi, tức margin không đổi. Dựa trên tính chất này, ta có thể giả sử:
y
n
(
w
T
x
n
+
b
)
=
1
với những điểm nằm gần mặt phân chia nhất như Hình 4 dưới đây:


Hình 4: Các điểm gần mặt phân cách nhất của hai classes được khoanh tròn.
Như vậy, với mọi 
n
, ta có:
y
n
(
w
T
x
n
+
b
)
≥
1
Vậy bài toán tối ưu 
(
1
)
 có thể đưa về bài toán tối ưu có ràng buộc sau đây:
(
w
,
b
)
=
arg
max
w
,
b
 
1
|
|
w
|
|
2
subject to:
 
y
n
(
w
T
x
n
+
b
)
≥
1
,
∀
n
=
1
,
2
,
…
,
N
 
 
 
 
(
2
)
Bằng 1 biến đổi đơn giản, ta có thể đưa bài toán này về bài toán dưới đây:
(
w
,
b
)
=
arg
min
w
,
b
 
1
2
|
|
w
|
|
2
2
subject to:
 
1
−
y
n
(
w
T
x
n
+
b
)
≤
0
,
∀
n
=
1
,
2
,
…
,
N
 
 
 
 
(
3
)
Ở đây, chúng ta đã lấy nghịch đảo hàm mục tiêu, bình phương nó để được một hàm khả vi, và nhân với 
1
2
 để biểu thức đạo hàm đẹp hơn.

Quan sát quan trọng: Trong bài toán 
(
3
)
, hàm mục tiêu là một norm, nên là một hàm lồi. Các hàm bất đẳng thức ràng buộc là các hàm tuyến tính theo 
w
 và 
b
, nên chúng cũng là các hàm lồi. Vậy bài toán tối ưu 
(
3
)
 có hàm mục tiêu là lồi, và các hàm ràng buộc cũng là lồi, nên nó là một bài toán lồi. Hơn nữa, nó là một Quadratic Programming. Thậm chí, hàm mục tiêu là strictly convex vì 
|
|
w
|
|
2
2
=
w
T
I
w
 và 
I
 là ma trận đơn vị - là một ma trận xác định dương. Từ đây có thể suy ra nghiệm cho SVM là duy nhất.

Đến đây thì bài toán này có thể giải được bằng các công cụ hỗ trợ tìm nghiệm cho Quadratic Programing, ví dụ CVXOPT.

Tuy nhiên, việc giải bài toán này trở nên phức tạp khi số chiều 
d
 của không gian dữ liệu và số điểm dữ liệu 
N
 tăng lên cao.

Người ta thường giải bài toán đối ngẫu của bài toán này. Thứ nhất, bài toán đối ngẫu có những tính chất thú vị hơn khiến nó được giải hiệu quả hơn. Thứ hai, trong quá trình xây dựng bài toán đối ngẫu, người ta thấy rằng SVM có thể được áp dụng cho những bài toán mà dữ liệu không linearly separable, tức các đường phân chia không phải là một mặt phẳng mà có thể là các mặt có hình thù phức tạp hơn.

Đến đây, bạn đọc có thể bắt đầu hiểu tại sao tôi cần viết 3 bài 16-18 trước khi viết bài này. Nếu bạn muốn hiểu sâu hơn về SVM, tôi khuyến khích đọc Mục 3 dưới đây. Nếu không, bạn có thể sang Mục 4 để xem ví dụ về cách sử dụng SVM khi lập trình.

Xác định class cho một điểm dữ liệu mới: Sau khi tìm được mặt phân cách 
w
T
x
+
b
=
0
, class của bất kỳ một điểm nào sẽ được xác định đơn giản bằng cách:

class
(
x
)
=
sgn
(
w
T
x
+
b
)
Trong đó hàm 
sgn
 là hàm xác định dấu, nhận giá trị 1 nếu đối số là không âm và -1 nếu ngược lại.


3. Bài toán đối ngẫu cho SVM
Nhắc lại rằng bài toán tối ưu 
(
3
)
 là một bài toán lồi. Chúng ta biết rằng: nếu một bài toán lồi thoả mãn tiêu chuẩn Slater thì strong duality thoả mãn. Và nếu strong duality thoả mãn thì nghiệm của bài toán chính là nghiệm của hệ điều kiện KKT.


3.1. Kiểm tra tiêu chuẩn Slater
Bước tiếp theo, chúng ta sẽ chứng minh bài toán tối ưu 
(
3
)
 thoả mãn điều kiện Slater. Điều kiện Slater nói rằng, nếu tồn tại 
w
,
b
 thoả mãn:
1
−
y
n
(
w
T
x
n
+
b
)
<
0
,
 
 
∀
n
=
1
,
2
,
…
,
N
thì strong duality thoả mãn.

Việc kiểm tra này tương đối đơn giản. Vì ta biết rằng luôn luôn có một (siêu) mặt phẳng phân chia hai classes nếu hai class đó là linearly separable, tức bài toán có nghiệm, nên feasible set của bài toán tối ưu 
(
3
)
 phải khác rỗng. Tức luôn luôn tồn tại cặp 
(
w
0
,
b
0
)
 sao cho:
1
−
y
n
(
w
T
0
x
n
+
b
0
)
≤
0
,
 
 
∀
n
=
1
,
2
,
…
,
N
⇔
2
−
y
n
(
2
w
T
0
x
n
+
2
b
0
)
≤
0
,
 
 
∀
n
=
1
,
2
,
…
,
N
Vậy chỉ cần chọn 
w
1
=
2
w
0
 và 
b
1
=
2
b
0
, ta sẽ có:
1
−
y
n
(
w
T
1
x
n
+
b
1
)
≤
−
1
<
0
,
 
 
∀
n
=
1
,
2
,
…
,
N
Từ đó suy ra điều kiện Slater thoả mãn.


3.2. Lagrangian của bài toán SVM
Lagrangian của bài toán 
(
3
)
 là:
L
(
w
,
b
,
λ
)
=
1
2
|
|
w
|
|
2
2
+
N
∑
n
=
1
 
λ
n
(
1
−
y
n
(
w
T
x
n
+
b
)
)
 
 
 
 
 
 
(
4
)
với 
λ
=
[
λ
1
,
λ
2
,
…
,
λ
N
]
T
 và 
λ
n
≥
0
,
 
∀
n
=
1
,
2
,
…
,
N
.

3.3. Hàm đối ngẫu Lagrange
Hàm đối ngẫu Lagrange được định nghĩa là:
g
(
λ
)
=
min
w
,
b
 
L
(
w
,
b
,
λ
)
với 
λ
⪰
0
.

Việc tìm giá trị nhỏ nhất của hàm này theo 
w
 và 
b
 có thể đựợc thực hiện bằng cách giải hệ phương trình đạo hàm của 
L
(
w
,
b
,
λ
)
 theo 
w
 và 
b
 bằng 0:

∂
L
(
w
,
b
,
λ
)
∂
w
=
w
−
N
∑
n
=
1
 
λ
n
y
n
x
n
=
0
⇒
w
=
N
∑
n
=
1
 
λ
n
y
n
x
n
 
 
 
 
 
(
5
)
∂
L
(
w
,
b
,
λ
)
∂
b
=
−
N
∑
n
=
1
 
λ
n
y
n
=
0
 
 
 
 
 
 
 
 
 
 
(
6
)
Thay 
(
5
)
 và 
(
6
)
 vào 
(
4
)
 ta thu được 
g
(
λ
)
(phần này tôi rút gọn, coi như một bài tập nhỏ cho bạn nào muốn hiểu sâu):
g
(
λ
)
=
N
∑
n
=
1
 
λ
n
−
1
2
N
∑
n
=
1
  
N
∑
m
=
1
 
λ
n
λ
m
y
n
y
m
x
T
n
x
m
 
 
 
 
 
 
 
 
 
(
7
)
Đây là hàm số quan trọng nhất trong SVM, các bạn sẽ thấy rõ hơn ở bài sau.

Xét ma trận:
V
=
[
y
1
x
1
,
y
2
x
2
,
…
,
y
N
x
N
]
và vector 
1
=
[
1
,
1
,
…
,
1
]
T
, ta có thể viết lại 
g
(
λ
)
 dưới dạng:
g
(
λ
)
=
−
1
2
λ
T
V
T
V
λ
+
1
T
λ
.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
(
8
)
(Nếu khó tin, bạn có thể viết ra để quen dần với các biểu thức đại số tuyến tính.)

Đặt 
K
=
V
T
V
, ta có một quan sát quan trọng: 
K
 là một ma trận nửa xác định dương. Thật vậy, với mọi vector 
λ
, ta có:
λ
T
K
λ
=
λ
T
V
T
V
λ
=
|
|
V
λ
|
|
2
2
≥
0.
(Đây chính là định nghĩa của ma trận nửa xác định dương.)

Vậy 
g
(
λ
)
=
−
1
2
λ
T
K
λ
+
1
T
λ
 là một hàm concave.


3.4. Bài toán đối ngẫu Lagrange
Từ đó, kết hợp hàm đối ngẫu Lagrange và các điều kiện ràng buộc của 
λ
, ta sẽ thu được bài toán đối ngẫu Lagrange:

λ
=
arg
max
λ
 
g
(
λ
)
subject to:
 
λ
⪰
0
 
 
 
 
 
 
 
 
 
 
(
9
)
N
∑
n
=
1
 
λ
n
y
n
=
0
Ràng buộc thứ hai được lấy từ 
(
6
)
.

Đây là một bài toán lồi vì ta đang đi tìm giá trị lớn nhất của một hàm mục tiêu là concave trên một polyhedron.

Bài toán này cũng được là một Quadratic Programming và cũng có thể được giải bằng các thư viện như CVXOPT.

Trong bài toán đối ngẫu này, số tham số (parameters) phải tìm là 
N
, là chiều của 
λ
, tức số điểm dữ liệu. Trong khi đó, với bài toán gốc 
(
3
)
, số tham số phải tìm là 
d
+
1
, là tổng số chiều của 
w
 và 
b
, tức số chiều của mỗi điểm dữ liệu cộng với 1. Trong rất nhiều trường hợp, số điểm dữ liệu có được trong training set lớn hơn số chiều dữ liệu rất nhiều. Nếu giải trực tiếp bằng các công cụ giải Quadratic Programming, có thể bài toán đối ngẫu còn phức tạp hơn (tốn thời gian hơn) so với bài toàn gốc. Tuy nhiên, điều hấp dẫn của bài toán đối ngẫu này đến từ phần Kernel Support Vector Machine (Kernel SVM), tức cho các bài toán mà dữ liệu không phải là linearly separable hoặc gần linearly separable. Phần Kernel SVM sẽ được tôi trình bày sau 1 hoặc 2 bài nữa. Ngoài ra, dựa vào tính chất đặc biệt của hệ điều kiện KKT mà SVM có thể được giải bằng nhiều phương pháp hiệu quả hơn.


3.5. Điều kiện KKT
Quay trở lại bài toán, vì đây là một bài toán lồi và strong duality thoả mãn, nghiệm của bài toán sẽ thoả mãn hệ điều kiện KKT sau đây với biến số là 
w
,
b
 và 
λ
:
1
−
y
n
(
w
T
x
n
+
b
)
≤
0
,
 
∀
n
=
1
,
2
,
…
,
N
 
 
 
 
(
10
)
λ
n
≥
0
,
 
∀
n
=
1
,
2
,
…
,
N
λ
n
(
1
−
y
n
(
w
T
x
n
+
b
)
)
=
0
,
 
∀
n
=
1
,
2
,
…
,
N
 
 
 
 
(
11
)
w
=
N
∑
n
=
1
 
λ
n
y
n
x
n
 
 
 
 
 
 
 
 
 
 
 
(
12
)
N
∑
n
=
1
 
λ
n
y
n
=
0
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
(
13
)
Trong những điều kiện trên, điều kiện 
(
11
)
 là thú vị nhất. Từ đó ta có thể suy ra ngay, với 
n
 bất kỳ, hoặc 
λ
n
=
0
 hoặc 
1
−
y
n
(
w
T
x
n
+
b
)
=
0
. Trường hợp thứ hai chính là:
w
T
x
n
+
b
=
y
n
 
 
 
 
(
14
)
với chú ý rằng 
y
2
n
=
1
,
 
∀
n
.

Những điểm thoả mãn 
(
14
)
 chính là những điểm nằm gần mặt phân chia nhất, là những điểm được khoanh tròn trong Hình 4 phía trên. Hai đường thẳng 
w
T
x
n
+
b
=
±
1
 tựa lên các điểm thoả mãn 
(
14
)
. Vậy nên những điểm (vectors) thoả mãn 
(
14
)
 còn được gọi là các Support Vectors. Và từ đó, cái tên Support Vector Machine ra đời.

Một quan sát khác, số lượng những điểm thoả mãn 
(
14
)
 thường chiếm số lượng rất nhỏ trong số 
N
 điểm. Chỉ cần dựa trên những support vectors này, chúng ta hoàn toàn có thể xác định được mặt phân cách cần tìm. Nhìn theo một cách khác, hầu hết các 
λ
n
 bằng 0. Vậy là mặc dù vector 
λ
∈
R
N
 có số chiều có thể rất lớn, số lượng các phần tử khác 0 của nó rất ít. Nói cách khác, vector 
λ
 là một sparse vector. Support Vector Machine vì vậy còn được xếp vào Sparse Models. Các Sparse Models thường có cách giải hiệu quả (nhanh) hơn các mô hình tương tự với nghiệm là dense (hầu hết khác 0). Đây chính là lý do thứ hai của việc bài toán đối ngẫu SVM được quan tâm nhiều hơn là bài toán gốc.

Tiếp tục phân tích, với những bài toán có số điểm dữ liệu 
N
 nhỏ, ta có thể giải hệ điều kiện KKT phía trên bằng cách xét các trường hợp 
λ
n
=
0
 hoặc 
λ
n
≠
0
. Tổng số trường hợp phải xét là 
2
N
. Với 
N
>
50
 (thường là như thế), đây là một con số rất lớn, giải bằng cách này sẽ không khả thi. Tôi sẽ không đi sâu tiếp vào việc giải hệ KKT như thế nào, trong phần tiếp theo chúng ta sẽ giải bài toán tối ưu 
(
9
)
 bằng CVXOPT và bằng thư viện sklearn.

Sau khi tìm được 
λ
 từ bài toán 
(
9
)
, ta có thể suy ra được 
w
 dựa vào 
(
12
)
 và 
b
 dựa vào 
(
11
)
 và 
(
13
)
. Rõ ràng ta chỉ cần quan tâm tới 
λ
n
≠
0
.

Gọi tập hợp 
S
=
{
n
:
λ
n
≠
0
}
 và 
N
S
 là số phần tử của tập 
S
. Với mỗi 
n
∈
S
, ta có:
1
=
y
n
(
w
T
x
n
+
b
)
⇔
b
+
w
T
x
n
=
y
n
Mặc dù từ chỉ một cặp 
(
x
n
,
y
n
)
, ta có thể suy ra ngay được 
b
 nếu đã biết 
w
, một phiên bản khác để tính 
b
 thường được sử dụng và được cho là ổn định hơn trong tính toán (numerically more stable) là:

b
=
1
N
S
∑
n
∈
S
 
(
y
n
−
w
T
x
n
)
=
1
N
S
∑
n
∈
S
 
(
y
n
−
∑
m
∈
S
 
λ
m
y
m
x
T
m
x
n
)
 
 
 
 
 
(
15
)
tức trung bình cộng của mọi cách tính 
b
.

Trước đó, 
w
 đã được tính bằng:
w
=
∑
m
∈
S
 
λ
m
y
m
x
m
 
 
 
 
 
 
(
16
)
theo 
(
12
)
.

Quan sát quan trọng: Để xác định một điểm 
x
 mới thuộc vào class nào, ta cần xác định dấu của biểu thức:
w
T
x
+
b
=
∑
m
∈
S
 
λ
m
y
m
x
T
m
x
+
1
N
S
∑
n
∈
S
 
(
y
n
−
∑
m
∈
S
 
λ
m
y
m
x
T
m
x
n
)
Biểu thức này phụ thuộc vào cách tính tích vô hướng giữa các cặp vector 
x
 và từng 
x
n
∈
S
. Nhận xét quan trọng này sẽ giúp ích cho chúng ta trong bài Kernal SVM.


4. Lập trình tìm nghiệm cho SVM
Trong mục này, tôi sẽ trình bày hai cách tính nghiệm cho SVM. Cách thứ nhất dựa theo bài toán 
(
9
)
 và các công thức 
(
15
)
 và 
(
16
)
. Cách thứ hai sử dụng trực tiếp thư viện sklearn. Cách thứ nhất chỉ là để chứng minh nãy giờ tôi không viết nhảm, bằng cách minh hoạ kết quả tìm được và so sánh với nghiệm tìm được bằng cách thứ hai.


4.1. Tìm nghiệm theo công thức
Trước tiên chúng ta gọi các modules cần dùng và tạo dữ liệu giả (dữ liệu này chính là dữ liệu tôi dùng trong các hình phía trên nên chúng ta biết chắc rằng hai classes là linearly separable):

from __future__ import print_function
import numpy as np 
import matplotlib.pyplot as plt
from scipy.spatial.distance import cdist
np.random.seed(22)

means = [[2, 2], [4, 2]]
cov = [[.3, .2], [.2, .3]]
N = 10
X0 = np.random.multivariate_normal(means[0], cov, N) # class 1
X1 = np.random.multivariate_normal(means[1], cov, N) # class -1 
X = np.concatenate((X0.T, X1.T), axis = 1) # all data 
y = np.concatenate((np.ones((1, N)), -1*np.ones((1, N))), axis = 1) # labels 
Tiếp theo, chúng ta giải bài toán 
(
9
)
 bằng CVXOPT:

from cvxopt import matrix, solvers
# build K
V = np.concatenate((X0.T, -X1.T), axis = 1)
K = matrix(V.T.dot(V)) # see definition of V, K near eq (8)

p = matrix(-np.ones((2*N, 1))) # all-one vector 
# build A, b, G, h 
G = matrix(-np.eye(2*N)) # for all lambda_n >= 0
h = matrix(np.zeros((2*N, 1)))
A = matrix(y) # the equality constrain is actually y^T lambda = 0
b = matrix(np.zeros((1, 1))) 
solvers.options['show_progress'] = False
sol = solvers.qp(K, p, G, h, A, b)

l = np.array(sol['x'])
print('lambda = ')
print(l.T)
Kết quả:

lambda = 
 [[  8.54018321e-01   2.89132533e-10   1.37095535e+00   6.36030818e-10
    4.04317408e-10   8.82390106e-10   6.35001881e-10   5.49567576e-10
    8.33359230e-10   1.20982928e-10   6.86678649e-10   1.25039745e-10
    2.22497367e+00   4.05417905e-09   1.26763684e-10   1.99008949e-10
    2.13742578e-10   1.51537487e-10   3.75329509e-10   3.56161975e-10]]
Ta nhận thấy rằng hầu hết các giá trị của lambda đều rất nhỏ, tới 
10
−
9
 hoặc 
10
−
10
. Đây chính là các giá trị bằng 0 nhưng vì sai số tính toán nên nó khác 0 một chút. Chỉ có 3 giá trị khác 0, ta dự đoán là sẽ có 3 điểm là support vectors.

Ta đi tìm support set 
S
 rồi tìm nghiệm của bài toán:

epsilon = 1e-6 # just a small number, greater than 1e-9
S = np.where(l > epsilon)[0]

VS = V[:, S]
XS = X[:, S]
yS = y[:, S]
lS = l[S]
# calculate w and b
w = VS.dot(lS)
b = np.mean(yS.T - w.T.dot(XS))

print('w = ', w.T)
print('b = ', b)
w =  [[-2.00984381  0.64068336]]
b =  4.66856063387
Minh hoạ kết quả:


Hình 5: Minh hoạ nghiệm tìm được bởi SVM.
Đường màu đen đậm ở giữa chính là mặt phân cách tìm được bằng SVM. Từ đây có thể thấy nhiều khả năng là các tính toán của ta là chính xác. Để kiểm tra xem các tính toán phía trên có chính xác không, ta cần tìm nghiệm bằng các công cụ có sẵn, ví dụ như sklearn.

Source code cho phần này có thể được tìm thấy ở đây.


4.2. Tìm nghiệm theo thư viện
Chúng ta sẽ sử dụng hàm sklearn.svm.SVC ở đây. Các bài toán thực tế thường sử dụng thư viện libsvm được viết trên ngôn ngữ C, có API cho Python và Matlab.

Nếu dùng thư viện thì sẽ như sau:

from sklearn.svm import SVC

y1 = y.reshape((2*N,))
X1 = X.T # each sample is one row
clf = SVC(kernel = 'linear', C = 1e5) # just a big number 

clf.fit(X1, y1) 

w = clf.coef_
b = clf.intercept_
print('w = ', w)
print('b = ', b)
w =  [[-2.00971102  0.64194082]]
b =  [ 4.66595309]
Kết quả này khá giống với kết quả chúng ta tìm được ở phần trên. Có rất nhiều tuỳ chọn cho SVM, các bạn sẽ dần thấy trong các bài sau.


5. Tóm tắt và thảo luận
Với bài toán binary classification mà 2 classes là linearly separable, có vô số các siêu mặt phẳng giúp phân biệt hai classes, tức mặt phân cách. Với mỗi mặt phân cách, ta có một classifier. Khoảng cách gần nhất từ 1 điểm dữ liệu tới mặt phân cách ấy được gọi là margin của classifier đó.

Support Vector Machine là bài toán đi tìm mặt phân cách sao cho margin tìm được là lớn nhất, đồng nghĩa với việc các điểm dữ liệu an toàn nhất so với mặt phân cách.

Bài toán tối ưu trong SVM là một bài toán lồi với hàm mục tiêu là stricly convex, nghiệm của bài toán này là duy nhất. Hơn nữa, bài toán tối ưu đó là một Quadratic Programming (QP).

Mặc dù có thể trực tiếp giải SVM qua bài toán tối ưu gốc này, thông thường người ta thường giải bài toán đối ngẫu. Bài toán đối ngẫu cũng là một QP nhưng nghiệm là sparse nên có những phương pháp giải hiệu quả hơn.

Với các bài toán mà dữ liệu gần linearly separable hoặc nonlinear separable, có những cải tiền khác của SVM để thích nghi với dữ liệu đó. Mời bạn đón đọc bài tiếp theo.

Source code.

6. Tài liệu tham khảo
[1] Bishop, Christopher M. “Pattern recognition and Machine Learning.”, Springer (2006). (book)

[2] Duda, Richard O., Peter E. Hart, and David G. Stork. Pattern classification. John Wiley & Sons, 2012.

[3] sklearn.svm.SVC

[4] LIBSVM – A Library for Support Vector Machines